<Project>
  <!-- Set common properties regarding assembly information and nuget packages -->
  <PropertyGroup>
    <Authors>Steven T. Cramer</Authors>
    <Product>Blazor State</Product>
    <!-- <PackageIconUrl>https://raw.githubusercontent.com/TimeWarpEngineering/blazor-state/master/Assets/Logo.png</PackageIconUrl> -->
    <PackageProjectUrl>https://timewarpengineering.github.io/blazor-state/</PackageProjectUrl>
    <PackageTags>BlazorState Microsoft ASP.NET Core Blazor State Blazor-State MediatR Mediator Pipeline Redux</PackageTags>
    <PackageReleaseNotes>a MediatR pipeline for Blazor state management.</PackageReleaseNotes>
    <RepositoryUrl>https://github.com/TimeWarpEngineering/blazor-state.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <IncludeSymbols>true</IncludeSymbols>
  </PropertyGroup>

  <!-- Common compile parameters -->
  <PropertyGroup>
    <Nullable>disable</Nullable>
    <LangVersion>preview</LangVersion>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <!-- We use full (Windows PDBs) until cross platform support for source link will get better also needed for codecov -->
    <DebugType>full</DebugType>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <TestProjectTargetFramework>netstandard2.1</TestProjectTargetFramework>
  </PropertyGroup>
  
  <!--Versions of packages used across the solution-->
  <PropertyGroup Label="Package Versions">
    <MicrosoftAspNetCoreComponentsWebAssemblyVersion>3.2.1</MicrosoftAspNetCoreComponentsWebAssemblyVersion>
    <MicrosoftAspNetCoreComponentsWebAssemblyBuildVersion>3.2.1</MicrosoftAspNetCoreComponentsWebAssemblyBuildVersion>
    <MicrosoftAspNetCoreComponentsWebAssemblyDevServerVersion>3.2.1</MicrosoftAspNetCoreComponentsWebAssemblyDevServerVersion>
    <MicrosoftAspNetCoreComponentsWebAssemblyServerVersion>3.2.1</MicrosoftAspNetCoreComponentsWebAssemblyServerVersion>
    <SystemNetHttpJsonVersion>3.2.1</SystemNetHttpJsonVersion>
    <SystemTextJsonVersion>4.7.2</SystemTextJsonVersion>
    <SystemConfigurationConfigurationManagerVersion>4.7.0</SystemConfigurationConfigurationManagerVersion>

    <MicrosoftAspNetCoreComponentsWebVersion>3.1.9</MicrosoftAspNetCoreComponentsWebVersion>
    <MicrosoftAspNetCoreMvcTestingVersion>3.1.9</MicrosoftAspNetCoreMvcTestingVersion>
    <MicrosoftAspNetCoreTestHostVersion>3.1.9</MicrosoftAspNetCoreTestHostVersion>    
    <MicrosoftExtensionsFileProvidersEmbeddedVersion>3.1.9</MicrosoftExtensionsFileProvidersEmbeddedVersion>
    <MicrosoftExtensionsLoggingAbstractionsVersion>3.1.9</MicrosoftExtensionsLoggingAbstractionsVersion>
    
    <MicrosoftSourceLinkGitHubVersion>1.0.0</MicrosoftSourceLinkGitHubVersion>

    <AnyCloneVersion>1.0.39</AnyCloneVersion>
    <BlazorExtensionsLoggingVersion>0.3.0</BlazorExtensionsLoggingVersion>
    <CoverletMsbuildVersion>2.9.0</CoverletMsbuildVersion>
    <FixieVersion>2.2.1</FixieVersion>
    <FixieConsoleVersion>2.2.1</FixieConsoleVersion>
    <FluentAssertionsVersion>5.10.3</FluentAssertionsVersion>
    <MediatrExtensionsMicrosoftDependencyInjectionVersion>9.0.0</MediatrExtensionsMicrosoftDependencyInjectionVersion>
    <MediatrVersion>9.0.0</MediatrVersion>
    <ScrutorVersion>3.2.2</ScrutorVersion>
    <SeleniumSupportVersion>3.141.0</SeleniumSupportVersion>
    <SeleniumWebDriverVersion>3.141.0</SeleniumWebDriverVersion>
    <ShouldlyVersion>3.0.2</ShouldlyVersion>
    <TypeSupportVersion>1.1.4</TypeSupportVersion>
  </PropertyGroup>
    
  <!--This is to add the SHA for the commit to your assembly InformationalVersion -->
  <Choose>
    <When Condition="'$(OfficialBuild)' != 'true'">
      <!-- On non-official builds we don't burn in a git sha. In large part because it
           hurts our determinism efforts as binaries which should be the same between
           builds will not (due to developers building against different HEAD
           values -->
      <PropertyGroup>
        <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GitHeadSha>Not found</GitHeadSha>
        <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).git'))</DotGitDir>
        <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
        <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
        <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
        <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
      </PropertyGroup>
    </Otherwise>
  </Choose>
</Project>